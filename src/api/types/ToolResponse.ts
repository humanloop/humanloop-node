/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Humanloop from "../index";

/**
 * Base type that all File Responses should inherit from.
 *
 * Attributes defined here are common to all File Responses and should be overridden
 * in the inheriting classes with documentation and appropriate Field definitions.
 */
export interface ToolResponse {
    /** Path of the Tool, including the name, which is used as a unique identifier. */
    path: string;
    /** Unique identifier for the Tool. */
    id: string;
    /** ID of the directory that the file is in on Humanloop. */
    directoryId?: string;
    /** Callable function specification of the Tool shown to the model for tool calling. */
    function?: Humanloop.ToolFunction;
    /** Code source of the Tool. */
    sourceCode?: string;
    /** Values needed to setup the Tool, defined in JSON Schema format: https://json-schema.org/ */
    setupValues?: Record<string, unknown>;
    /** Additional fields to describe the Tool. Helpful to separate Tool versions from each other with details on how they were created or used. */
    attributes?: Record<string, unknown>;
    /** Type of Tool. */
    toolType?: Humanloop.FilesToolType;
    /** Message describing the changes made. */
    commitMessage?: string;
    /** Name of the Tool, which is used as a unique identifier. */
    name: string;
    /** Unique identifier for the specific Tool Version. If no query params provided, the default deployed Tool Version is returned. */
    versionId: string;
    type?: "tool";
    /** The list of environments the Tool Version is deployed to. */
    environments?: Humanloop.EnvironmentResponse[];
    createdAt: Date;
    updatedAt: Date;
    /** The user who created the Tool. */
    createdBy?: Humanloop.UserResponse | undefined;
    /** The status of the Tool Version. */
    status: Humanloop.VersionStatus;
    lastUsedAt: Date;
    /** The number of logs that have been generated for this Tool Version */
    versionLogsCount: number;
    /** The number of logs that have been generated across all Tool Versions */
    totalLogsCount: number;
    /** Inputs associated to the Prompt. Inputs correspond to any of the variables used within the Tool template. */
    inputs: Humanloop.InputResponse[];
    /** Evaluators that have been attached to this Tool that are used for monitoring logs. */
    evaluators?: Humanloop.MonitoringEvaluatorResponse[];
    /** Signature of the Tool. */
    signature?: string;
    /** Aggregation of Evaluator results for the Tool Version. */
    evaluatorAggregates?: Humanloop.EvaluatorAggregate[];
}
