/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Humanloop from "../index";

/**
 * Model config used for logging both chat and completion.
 */
export interface ModelConfigRequest {
    /** A friendly display name for the model config. If not provided, a name will be generated. */
    name?: string;
    /** A description of the model config. */
    description?: string;
    /** The company providing the underlying model service. */
    provider?: Humanloop.ModelProviders;
    /** The model instance used. E.g. text-davinci-002. */
    model: string;
    /** The maximum number of tokens to generate. Provide max_tokens=-1 to dynamically calculate the maximum number of tokens to generate given the length of the prompt */
    maxTokens?: number;
    /** What sampling temperature to use when making a generation. Higher values means the model will be more creative. */
    temperature?: number;
    /** An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. */
    topP?: number;
    /** The string (or list of strings) after which the model will stop generating. The returned text will not contain the stop sequence. */
    stop?: Humanloop.ModelConfigRequestStop;
    /** Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the generation so far. */
    presencePenalty?: number;
    /** Number between -2.0 and 2.0. Positive values penalize new tokens based on how frequently they appear in the generation so far. */
    frequencyPenalty?: number;
    /** Other parameter values to be passed to the provider call. */
    other?: Record<string, unknown>;
    /** If specified, model will make a best effort to sample deterministically, but it is not guaranteed. */
    seed?: number;
    /** The format of the response. Only type json_object is currently supported for chat. */
    responseFormat?: Humanloop.ResponseFormat;
    /** The provider model endpoint used. */
    endpoint?: Humanloop.ModelEndpoints;
    /** Prompt template that will take your specified inputs to form your final request to the model. Input variables within the prompt template should be specified with syntax: {{INPUT_NAME}}. */
    promptTemplate?: string;
    /** Messages prepended to the list of messages sent to the provider. These messages that will take your specified inputs to form your final request to the provider model. Input variables within the template should be specified with syntax: {{INPUT_NAME}}. */
    chatTemplate?: Humanloop.ChatMessageWithToolCall[];
    /** Make tools available to OpenAIs chat model as functions. */
    tools?: Humanloop.ModelConfigRequestToolsItem[];
    type?: "model";
}
