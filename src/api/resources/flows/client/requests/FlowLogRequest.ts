/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Humanloop from "../../../../index";

/**
 * @example
 *     {
 *         logId: "medqa_experiment_0001",
 *         id: "fl_6o701g4jmcanPVHxdqD0O",
 *         flow: {
 *             attributes: {
 *                 "prompt": {
 *                     "template": "You are a helpful assistant helping with medical anamnesis",
 *                     "model": "gpt-4o",
 *                     "temperature": 0.8
 *                 },
 *                 "tool": {
 *                     "name": "retrieval_tool_v3",
 *                     "description": "Retrieval tool for MedQA.",
 *                     "source_code": "def retrieval_tool(question: str) -> str:\n    pass\n"
 *                 }
 *             }
 *         },
 *         inputs: {
 *             "question": "Patient with a history of diabetes and hypertension presents with chest pain and shortness of breath."
 *         },
 *         output: "The patient is likely experiencing a myocardial infarction. Immediate medical attention is required.",
 *         traceStatus: "incomplete",
 *         startTime: "2024-07-08T22:40:35",
 *         endTime: "2024-07-08T22:40:39"
 *     }
 */
export interface FlowLogRequest {
    /**
     * A specific Version ID of the Flow to log to.
     */
    versionId?: string;
    /**
     * Name of the Environment identifying a deployed version to log to.
     */
    environment?: string;
    /** Unique identifier for the Evaluation Report to associate the Log to. */
    evaluationId?: string;
    /** Path of the Flow, including the name. This locates the Flow in the Humanloop filesystem and is used as as a unique identifier. For example: `folder/name` or just `name`. */
    path?: string;
    /** ID for an existing Flow. */
    id?: string;
    /** The start time of the Trace. Will be updated if a child Log with an earlier start time is added. */
    startTime?: Date;
    /** The end time of the Trace. Will be updated if a child Log with a later end time is added. */
    endTime?: Date;
    /** Generated output from your model for the provided inputs. Can be `None` if logging an error, or if creating a parent Log with the intention to populate it later. */
    output?: string;
    /** User defined timestamp for when the log was created. */
    createdAt?: Date;
    /** Error message if the log is an error. */
    error?: string;
    /** Duration of the logged event in seconds. */
    providerLatency?: number;
    /** Captured log and debug statements. */
    stdout?: string;
    /** Raw request sent to provider. */
    providerRequest?: Record<string, unknown>;
    /** Raw response received the provider. */
    providerResponse?: Record<string, unknown>;
    /** The inputs passed to the prompt template. */
    inputs?: Record<string, unknown>;
    /** Identifies where the model was called from. */
    source?: string;
    /** Any additional metadata to record. */
    metadata?: Record<string, unknown>;
    /** Unique identifier for the Datapoint that this Log is derived from. This can be used by Humanloop to associate Logs to Evaluations. If provided, Humanloop will automatically associate this Log to Evaluations that require a Log for this Datapoint-Version pair. */
    sourceDatapointId?: string;
    /** The ID of the parent Log to nest this Log under in a Trace. */
    traceParentId?: string;
    /** Unique identifier for the Batch to add this Batch to. Batches are used to group Logs together for Evaluations. A Batch will be created if one with the given ID does not exist. */
    batchId?: string;
    /** End-user ID related to the Log. */
    user?: string;
    /** The name of the Environment the Log is associated to. */
    flowLogRequestEnvironment?: string;
    /** Whether the request/response payloads will be stored on Humanloop. */
    save?: boolean;
    /** The identifier for the Log. If not specified, a default ID will be generated. This allows additional Logs to be appended to the trace without waiting for Humanloop to return an ID. */
    logId?: string;
    /** Flow used to generate the Trace. */
    flow?: Humanloop.FlowKernelRequest;
    /** Status of the Trace. When a Trace is marked as `complete`, no more Logs can be added to it. Monitoring Evaluators will only run on `complete` Traces. If you do not intend to add more Logs to the Trace after creation, set this to `complete`. */
    traceStatus?: Humanloop.TraceStatus;
}
