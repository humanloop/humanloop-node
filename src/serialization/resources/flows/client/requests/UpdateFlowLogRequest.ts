/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Humanloop from "../../../../../api/index";
import * as core from "../../../../../core";
import { ChatMessage } from "../../../../types/ChatMessage";
import { LogStatus } from "../../../../types/LogStatus";

export const UpdateFlowLogRequest: core.serialization.Schema<
    serializers.UpdateFlowLogRequest.Raw,
    Humanloop.UpdateFlowLogRequest
> = core.serialization.object({
    messages: core.serialization.list(ChatMessage).optional(),
    outputMessage: core.serialization.property("output_message", ChatMessage.optional()),
    inputs: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    output: core.serialization.string().optional(),
    error: core.serialization.string().optional(),
    logStatus: core.serialization.property("log_status", LogStatus.optional()),
});

export declare namespace UpdateFlowLogRequest {
    export interface Raw {
        messages?: ChatMessage.Raw[] | null;
        output_message?: ChatMessage.Raw | null;
        inputs?: Record<string, unknown> | null;
        output?: string | null;
        error?: string | null;
        log_status?: LogStatus.Raw | null;
    }
}
