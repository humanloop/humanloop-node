/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Humanloop from "../../../../../api/index";
import * as core from "../../../../../core";
import { ModelEndpoints } from "../../../../types/ModelEndpoints";
import { AgentRequestTemplate } from "../../types/AgentRequestTemplate";
import { TemplateLanguage } from "../../../../types/TemplateLanguage";
import { ModelProviders } from "../../../../types/ModelProviders";
import { AgentRequestStop } from "../../types/AgentRequestStop";
import { ResponseFormat } from "../../../../types/ResponseFormat";
import { AgentRequestReasoningEffort } from "../../types/AgentRequestReasoningEffort";
import { AgentRequestToolsItem } from "../../types/AgentRequestToolsItem";

export const AgentRequest: core.serialization.Schema<serializers.AgentRequest.Raw, Humanloop.AgentRequest> =
    core.serialization.object({
        path: core.serialization.string().optional(),
        id: core.serialization.string().optional(),
        model: core.serialization.string(),
        endpoint: ModelEndpoints.optional(),
        template: AgentRequestTemplate.optional(),
        templateLanguage: core.serialization.property("template_language", TemplateLanguage.optional()),
        provider: ModelProviders.optional(),
        maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
        temperature: core.serialization.number().optional(),
        topP: core.serialization.property("top_p", core.serialization.number().optional()),
        stop: AgentRequestStop.optional(),
        presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
        frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
        other: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        seed: core.serialization.number().optional(),
        responseFormat: core.serialization.property("response_format", ResponseFormat.optional()),
        reasoningEffort: core.serialization.property("reasoning_effort", AgentRequestReasoningEffort.optional()),
        tools: core.serialization.list(AgentRequestToolsItem).optional(),
        attributes: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
        maxIterations: core.serialization.property("max_iterations", core.serialization.number().optional()),
        versionName: core.serialization.property("version_name", core.serialization.string().optional()),
        versionDescription: core.serialization.property("version_description", core.serialization.string().optional()),
        description: core.serialization.string().optional(),
        tags: core.serialization.list(core.serialization.string()).optional(),
        readme: core.serialization.string().optional(),
    });

export declare namespace AgentRequest {
    export interface Raw {
        path?: string | null;
        id?: string | null;
        model: string;
        endpoint?: ModelEndpoints.Raw | null;
        template?: AgentRequestTemplate.Raw | null;
        template_language?: TemplateLanguage.Raw | null;
        provider?: ModelProviders.Raw | null;
        max_tokens?: number | null;
        temperature?: number | null;
        top_p?: number | null;
        stop?: AgentRequestStop.Raw | null;
        presence_penalty?: number | null;
        frequency_penalty?: number | null;
        other?: Record<string, unknown> | null;
        seed?: number | null;
        response_format?: ResponseFormat.Raw | null;
        reasoning_effort?: AgentRequestReasoningEffort.Raw | null;
        tools?: AgentRequestToolsItem.Raw[] | null;
        attributes?: Record<string, unknown> | null;
        max_iterations?: number | null;
        version_name?: string | null;
        version_description?: string | null;
        description?: string | null;
        tags?: string[] | null;
        readme?: string | null;
    }
}
