/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Humanloop from "../../../../../api/index";
import * as core from "../../../../../core";
import { ChatMessage } from "../../../../types/ChatMessage";
import { PromptsCallStreamRequestToolChoice } from "../../types/PromptsCallStreamRequestToolChoice";
import { PromptsCallStreamRequestPrompt } from "../../types/PromptsCallStreamRequestPrompt";
import { ProviderApiKeys } from "../../../../types/ProviderApiKeys";

export const PromptsCallStreamRequest: core.serialization.Schema<
    serializers.PromptsCallStreamRequest.Raw,
    Omit<Humanloop.PromptsCallStreamRequest, "versionId" | "environment">
> = core.serialization.object({
    path: core.serialization.string().optional(),
    id: core.serialization.string().optional(),
    messages: core.serialization.list(ChatMessage).optional(),
    toolChoice: core.serialization.property("tool_choice", PromptsCallStreamRequestToolChoice.optional()),
    prompt: PromptsCallStreamRequestPrompt.optional(),
    inputs: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    source: core.serialization.string().optional(),
    metadata: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    startTime: core.serialization.property("start_time", core.serialization.date().optional()),
    endTime: core.serialization.property("end_time", core.serialization.date().optional()),
    sourceDatapointId: core.serialization.property("source_datapoint_id", core.serialization.string().optional()),
    traceParentId: core.serialization.property("trace_parent_id", core.serialization.string().optional()),
    user: core.serialization.string().optional(),
    promptsCallStreamRequestEnvironment: core.serialization.property(
        "environment",
        core.serialization.string().optional(),
    ),
    save: core.serialization.boolean().optional(),
    logId: core.serialization.property("log_id", core.serialization.string().optional()),
    providerApiKeys: core.serialization.property("provider_api_keys", ProviderApiKeys.optional()),
    numSamples: core.serialization.property("num_samples", core.serialization.number().optional()),
    returnInputs: core.serialization.property("return_inputs", core.serialization.boolean().optional()),
    logprobs: core.serialization.number().optional(),
    suffix: core.serialization.string().optional(),
});

export declare namespace PromptsCallStreamRequest {
    export interface Raw {
        path?: string | null;
        id?: string | null;
        messages?: ChatMessage.Raw[] | null;
        tool_choice?: PromptsCallStreamRequestToolChoice.Raw | null;
        prompt?: PromptsCallStreamRequestPrompt.Raw | null;
        inputs?: Record<string, unknown> | null;
        source?: string | null;
        metadata?: Record<string, unknown> | null;
        start_time?: string | null;
        end_time?: string | null;
        source_datapoint_id?: string | null;
        trace_parent_id?: string | null;
        user?: string | null;
        environment?: string | null;
        save?: boolean | null;
        log_id?: string | null;
        provider_api_keys?: ProviderApiKeys.Raw | null;
        num_samples?: number | null;
        return_inputs?: boolean | null;
        logprobs?: number | null;
        suffix?: string | null;
    }
}
