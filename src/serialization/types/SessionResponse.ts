/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Humanloop from "../../api/index";
import * as core from "../../core";

export const SessionResponse: core.serialization.ObjectSchema<
    serializers.SessionResponse.Raw,
    Humanloop.SessionResponse
> = core.serialization.object({
    id: core.serialization.string(),
    createdAt: core.serialization.property("created_at", core.serialization.date()),
    updatedAt: core.serialization.property("updated_at", core.serialization.date()),
    firstInputs: core.serialization.property(
        "first_inputs",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    lastOutput: core.serialization.property("last_output", core.serialization.string().optional()),
    logsCount: core.serialization.property("logs_count", core.serialization.number()),
    events: core.serialization.list(core.serialization.lazyObject(() => serializers.SessionEventResponse)),
});

export declare namespace SessionResponse {
    interface Raw {
        id: string;
        created_at: string;
        updated_at: string;
        first_inputs?: Record<string, unknown> | null;
        last_output?: string | null;
        logs_count: number;
        events: serializers.SessionEventResponse.Raw[];
    }
}
