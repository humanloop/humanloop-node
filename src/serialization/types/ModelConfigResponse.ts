/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as Humanloop from "../../api/index";
import * as core from "../../core";
import { ModelProviders } from "./ModelProviders";
import { ModelConfigResponseStop } from "./ModelConfigResponseStop";
import { ResponseFormat } from "./ResponseFormat";
import { ChatMessageWithToolCall } from "./ChatMessageWithToolCall";
import { ToolConfigResponse } from "./ToolConfigResponse";
import { ConfigToolResponse } from "./ConfigToolResponse";
import { ModelEndpoints } from "./ModelEndpoints";

export const ModelConfigResponse: core.serialization.ObjectSchema<
    serializers.ModelConfigResponse.Raw,
    Humanloop.ModelConfigResponse
> = core.serialization.object({
    id: core.serialization.string(),
    other: core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional(),
    type: core.serialization.stringLiteral("model"),
    name: core.serialization.string().optional(),
    description: core.serialization.string().optional(),
    provider: ModelProviders.optional(),
    model: core.serialization.string(),
    maxTokens: core.serialization.property("max_tokens", core.serialization.number().optional()),
    temperature: core.serialization.number().optional(),
    topP: core.serialization.property("top_p", core.serialization.number().optional()),
    stop: ModelConfigResponseStop.optional(),
    presencePenalty: core.serialization.property("presence_penalty", core.serialization.number().optional()),
    frequencyPenalty: core.serialization.property("frequency_penalty", core.serialization.number().optional()),
    seed: core.serialization.number().optional(),
    responseFormat: core.serialization.property("response_format", ResponseFormat.optional()),
    promptTemplate: core.serialization.property("prompt_template", core.serialization.string().optional()),
    chatTemplate: core.serialization.property(
        "chat_template",
        core.serialization.list(ChatMessageWithToolCall).optional()
    ),
    toolConfigs: core.serialization.property("tool_configs", core.serialization.list(ToolConfigResponse).optional()),
    tools: core.serialization.list(ConfigToolResponse).optional(),
    endpoint: ModelEndpoints.optional(),
});

export declare namespace ModelConfigResponse {
    interface Raw {
        id: string;
        other?: Record<string, unknown> | null;
        type: "model";
        name?: string | null;
        description?: string | null;
        provider?: ModelProviders.Raw | null;
        model: string;
        max_tokens?: number | null;
        temperature?: number | null;
        top_p?: number | null;
        stop?: ModelConfigResponseStop.Raw | null;
        presence_penalty?: number | null;
        frequency_penalty?: number | null;
        seed?: number | null;
        response_format?: ResponseFormat.Raw | null;
        prompt_template?: string | null;
        chat_template?: ChatMessageWithToolCall.Raw[] | null;
        tool_configs?: ToolConfigResponse.Raw[] | null;
        tools?: ConfigToolResponse.Raw[] | null;
        endpoint?: ModelEndpoints.Raw | null;
    }
}
