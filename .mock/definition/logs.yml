imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    listLogsForFile:
      path: /logs
      method: GET
      auth: true
      docs: List Logs.
      pagination:
        offset: $request.page
        results: $response.records
      display-name: List
      request:
        name: ListLogsForFileLogsGetRequest
        query-parameters:
          file_id:
            type: string
            docs: Unique identifier for the File to list Logs for.
          page:
            type: optional<integer>
            docs: Page number for pagination.
          size:
            type: optional<integer>
            docs: Page size for pagination. Number of Logs to fetch.
          version_id:
            type: optional<string>
            docs: >-
              If provided, only Logs belonging to the specified Version will be
              returned.
          version_status:
            type: optional<root.VersionStatus>
            docs: >-
              If provided, only Logs belonging to Versions with the specified
              status will be returned.
          search:
            type: optional<string>
            docs: >-
              If provided, only Logs that contain the provided string in its
              inputs and output will be returned.
          metadata_search:
            type: optional<string>
            docs: >-
              If provided, only Logs that contain the provided string in its
              metadata will be returned.
          start_date:
            type: optional<datetime>
            docs: >-
              If provided, only Logs created after the specified date will be
              returned.
          end_date:
            type: optional<datetime>
            docs: >-
              If provided, only Logs created before the specified date will be
              returned.
      response:
        docs: Successful Response
        type: root.PaginatedPromptLogResponse
      errors:
        - root.UnprocessableEntityError
      examples:
        - query-parameters:
            file_id: file_id
          response:
            body:
              records:
                - id: id
                  output_message:
                    role: user
                  prompt_tokens: 1
                  output_tokens: 1
                  prompt_cost: 1.1
                  output_cost: 1.1
                  finish_reason: finish_reason
                  prompt:
                    path: path
                    id: id
                    name: name
                    version_id: version_id
                    created_at: '2024-01-15T09:30:00Z'
                    updated_at: '2024-01-15T09:30:00Z'
                    status: uncommitted
                    last_used_at: '2024-01-15T09:30:00Z'
                    model: model
                    version_logs_count: 1
                    total_logs_count: 1
                    inputs:
                      - name: name
                  messages:
                    - role: user
                  tool_choice: none
                  output: output
                  raw_output: raw_output
                  created_at: '2024-01-15T09:30:00Z'
                  error: error
                  provider_latency: 1.1
                  session_id: session_id
                  parent_id: parent_id
                  source: source
                  save: true
                  source_datapoint_id: source_datapoint_id
                  batches:
                    - batches
                  user: user
                  environment: environment
              page: 1
              size: 1
              total: 1
    delete:
      path: /logs
      method: DELETE
      auth: true
      docs: Delete Logs with the given IDs.
      display-name: Delete
      request:
        name: LogsDeleteRequest
        query-parameters:
          id:
            type: optional<string>
            allow-multiple: true
            docs: Unique identifiers for the Logs to delete.
      errors:
        - root.UnprocessableEntityError
    get:
      path: /logs/{id}
      method: GET
      auth: true
      docs: Retrieve the Log with the given ID.
      path-parameters:
        id:
          type: string
          docs: Unique identifier for Log.
      display-name: Get Log
      response:
        docs: Successful Response
        type: root.PromptLogResponse
      errors:
        - root.UnprocessableEntityError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: id
              output_message:
                content: content
                name: name
                tool_call_id: tool_call_id
                role: user
                tool_calls:
                  - id: id
                    type: function
                    function:
                      name: name
              prompt_tokens: 1
              output_tokens: 1
              prompt_cost: 1.1
              output_cost: 1.1
              finish_reason: finish_reason
              prompt:
                path: path
                id: id
                name: name
                version_id: version_id
                type: prompt
                environments:
                  - id: id
                    created_at: '2024-01-15T09:30:00Z'
                    name: name
                    tag: default
                created_at: '2024-01-15T09:30:00Z'
                updated_at: '2024-01-15T09:30:00Z'
                created_by:
                  id: id
                  email_address: email_address
                  full_name: full_name
                status: uncommitted
                last_used_at: '2024-01-15T09:30:00Z'
                model: model
                endpoint: complete
                template: template
                provider: openai
                max_tokens: 1
                temperature: 1.1
                top_p: 1.1
                stop: stop
                presence_penalty: 1.1
                frequency_penalty: 1.1
                other:
                  other:
                    key: value
                seed: 1
                response_format:
                  type: json_object
                tools:
                  - name: name
                    description: description
                linked_tools:
                  - name: name
                    description: description
                    id: id
                    version_id: version_id
                commit_message: commit_message
                version_logs_count: 1
                total_logs_count: 1
                inputs:
                  - name: name
                evaluator_aggregates:
                  - value: 1.1
                    evaluator_id: evaluator_id
                    evaluator_version_id: evaluator_version_id
                    created_at: '2024-01-15T09:30:00Z'
                    updated_at: '2024-01-15T09:30:00Z'
              messages:
                - content: content
                  name: name
                  tool_call_id: tool_call_id
                  role: user
                  tool_calls:
                    - id: id
                      type: function
                      function:
                        name: name
              tool_choice: none
              output: output
              raw_output: raw_output
              created_at: '2024-01-15T09:30:00Z'
              error: error
              provider_latency: 1.1
              provider_request:
                provider_request:
                  key: value
              provider_response:
                provider_response:
                  key: value
              session_id: session_id
              parent_id: parent_id
              inputs:
                inputs:
                  key: value
              source: source
              metadata:
                metadata:
                  key: value
              save: true
              source_datapoint_id: source_datapoint_id
              batches:
                - batches
              user: user
              environment: environment
  display-name: Logs
docs: >+
  Logs contain the inputs and outputs of each time a Prompt, Tool or Evaluator
  is called.


  Humanloop automatically records the inputs and outputs when you Call a Prompt
  or Tool and saves a Log.

  Evaluator Logs are also created when an Evaluator is run on a Log.


  You can manually create Logs through the API.


  ...


