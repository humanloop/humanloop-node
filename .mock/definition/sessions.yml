imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /sessions/{id}
      method: GET
      auth: true
      docs: Retrieve the Session with the given ID.
      path-parameters:
        id:
          type: string
          docs: Unique identifier for Session.
      display-name: Get
      response:
        docs: Successful Response
        type: root.SessionResponse
      errors:
        - root.UnprocessableEntityError
      examples:
        - name: Get session
          path-parameters:
            id: sesh_123abc
          response:
            body:
              id: sesh_456hij
              created_at: '2024-05-01T12:00:00Z'
              updated_at: '2024-05-01T12:00:00Z'
              logs:
                - id: log_123efg
                  created_at: '2024-05-01T12:00:00Z'
                  output: This is a sample output.
                  prompt:
                    id: pr_123abc
                    name: Test Prompt
                    path: test-prompt
                    version_id: pv_456def
                    created_at: '2024-05-01T12:00:00Z'
                    updated_at: '2024-05-01T12:00:00Z'
                    status: committed
                    last_used_at: '2024-05-01T12:00:00Z'
                    model: gpt-4
                    version_logs_count: 1
                    total_logs_count: 1
                    inputs:
                      - name: question
    delete:
      path: /sessions/{id}
      method: DELETE
      auth: true
      docs: Delete the Session with the given ID.
      path-parameters:
        id:
          type: string
          docs: Unique identifier for Session.
      display-name: Delete
      errors:
        - root.UnprocessableEntityError
      examples:
        - name: Delete session
          path-parameters:
            id: sesh_123abc
    list:
      path: /sessions
      method: GET
      auth: true
      docs: Get a list of Sessions.
      pagination:
        offset: $request.page
        results: $response.records
      display-name: 'List '
      request:
        name: ListSessionsGetRequest
        query-parameters:
          file_id:
            type: optional<string>
            docs: >-
              Unique identifier for File to return Sessions for. Sessions that
              contain any Logs associated to this File will be returned.
          version_id:
            type: optional<string>
            docs: >-
              Unique identifier for Version to return Sessions for. Sessions
              that contain any Logs associated to this Version will be returned.
          page:
            type: optional<integer>
            docs: Page number for pagination.
          size:
            type: optional<integer>
            docs: Page size for pagination. Number of Sessions to fetch.
      response:
        docs: Successful Response
        type: root.PaginatedSessionResponse
      errors:
        - root.UnprocessableEntityError
      examples:
        - name: List sessions
          query-parameters:
            size: 1
            file_id: pr_123abc
          response:
            body:
              records:
                - id: sesh_456hij
                  created_at: '2024-05-01T12:00:00Z'
                  updated_at: '2024-05-01T12:00:00Z'
                  logs:
                    - id: log_123efg
                      created_at: '2024-05-01T12:00:00Z'
                      output: This is a sample output.
                      prompt:
                        id: pr_123abc
                        name: Test Prompt
                        path: test-prompt
                        version_id: pv_456def
                        created_at: '2024-05-01T12:00:00Z'
                        updated_at: '2024-05-01T12:00:00Z'
                        status: committed
                        last_used_at: '2024-05-01T12:00:00Z'
                        model: gpt-4
                        version_logs_count: 1
                        total_logs_count: 1
                        inputs:
                          - name: question
              page: 1
              size: 11
              total: 1
  display-name: Sessions
docs: >+
  Sessions are groups of Logs that track sequences of LLM actions.


  Sessions enable you to trace through related Logs across different Files. For

  example, a Session can contain a Prompt Log recording an LLM generation, a
  Tool

  Log recording a retrieval step, and Evaluator Logs measuring the quality of
  the

  generated text.


  Logs within a Session may be nested within each other. When Evaluators are run

  for monitoring, the Evaluator Logs are added to the Session that the evaluated

  Log is in, nested within the evaluated Log.

